package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;

@Autonomous(name = "AutonomousBlueBlocks", group = "")
public class AutonomousBlueBlocks extends LinearOpMode {

    private Servo HornServoR;
    private Servo HornServoL;
    private Servo pushbarRight;
    private Servo pushbarLeft;
    private DcMotor leftRear;
    private DcMotor rightRear;
    private DcMotor rightFront;
    private DcMotor leftFront;
    private int Ticks;
    private double inches;
    private ElapsedTime t = new ElapsedTime();

    @Override
    public void runOpMode() {
        HornServoR = hardwareMap.servo.get("HornServoR");
        HornServoL = hardwareMap.servo.get("HornServoL");
        leftRear = hardwareMap.dcMotor.get("leftRear");
        rightRear = hardwareMap.dcMotor.get("rightRear");
        rightFront = hardwareMap.dcMotor.get("rightFront");
        leftFront = hardwareMap.dcMotor.get("leftFront");
        pushbarLeft = hardwareMap.servo.get("PushbarServoLeft");
        pushbarRight = hardwareMap.servo.get("PushbarServoRight");

        waitForStart();
        if (opModeIsActive()) {
            // Test:
            // 588 = 1 rotation
            HornServoR.setPosition(0.9);
            HornServoL.setPosition(0.2);
            pushbarLeft.setPosition(0.6);
            pushbarRight.setPosition(0.4);
            inches = 18;
            Ticks = (int) (62.5*inches);
            encoderStrafe(2);
            inches = 12;
            Ticks = (int) (62.5*inches);
            encoderStraight(2);
            inches = 26;
            Ticks = (int) (62.5*inches);
            encoderTurn();
            pushbarLeft.setPosition(0.4);
            pushbarRight.setPosition(0.6);
            inches = 12;
            Ticks = (int) (62.5*inches);
            encoderStraight(2);
            sleep (200);
            inches = 4;
            Ticks = (int) (62.5*inches);
            encoderStrafe(2);
            inches = -26;
            Ticks = (int) (62.5*inches);
            encoderTurn();
            inches = 18;
            Ticks = (int) (62.5*inches);
            encoderStraight(2);
            inches = 13;
            Ticks = (int) (62.5*inches);
            encoderTurn();
            inches = 26;
            Ticks = (int) (62.5*inches);
            encoderStraight(2);
            pushbarLeft.setPosition(0.6);
            pushbarRight.setPosition(0.4);
            sleep (200);
            inches = -20;
            Ticks = (int) (62.5*inches);
            encoderStraight(2);
            inches = -13;
            Ticks = (int) (62.5*inches);
            encoderTurn();


        }
    }

    /**
     * Describe this function...
     */
    private void encoderStrafe(double timeout) {
        // positive right, negative left
        leftRear.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rightRear.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rightFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        leftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        leftRear.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        leftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightRear.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        leftRear.setTargetPosition(0 + Ticks);
        leftFront.setTargetPosition(0 - Ticks);
        rightRear.setTargetPosition(0 + Ticks);
        rightFront.setTargetPosition(0 - Ticks);
        leftRear.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftFront.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        rightRear.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        rightFront.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftRear.setPower (1);
        rightRear.setPower(1);
        rightFront.setPower(1);
        leftFront.setPower(1);
        ElapsedTime timeofstrafe = new ElapsedTime();
        double starttime = timeofstrafe.time();
        while ((leftFront.isBusy() || rightFront.isBusy() || rightRear.isBusy() || leftRear.isBusy() || opModeIsActive())&&timeofstrafe.time()-starttime < timeout) {
            //nothing
        }
        telemetry.addData("Status", "Initialized");
        telemetry.addData("leftfrontPower", leftFront.getPower());
        telemetry.addData("rightfrontPower", rightFront.getPower());
        telemetry.addData("leftrearPower",leftRear.getPower());
        telemetry.addData("rightrearPower",rightRear.getPower());
        telemetry.update();
        leftRear.setPower(0);
        rightRear.setPower(0);
        leftFront.setPower(0);
        rightFront.setPower(0);

    }

    /**
     * Describe this function...
     */
    private void encoderStraight(double timeout) {
        // positive forward, negative backward
        leftRear.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rightRear.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rightFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        leftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        leftRear.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        leftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightRear.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        leftRear.setTargetPosition(0 - Ticks);
        leftFront.setTargetPosition(0 - Ticks);
        rightRear.setTargetPosition(0 + Ticks);
        rightFront.setTargetPosition(0 + Ticks);
        leftRear.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftFront.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        rightRear.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        rightFront.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftRear.setPower(0.8);
        rightRear.setPower(0.8);
        rightFront.setPower(0.8);
        leftFront.setPower(0.8);
        ElapsedTime timeofstraight = new ElapsedTime();
        double starttime = timeofstraight.time();
        while ((leftFront.isBusy() || rightFront.isBusy() || rightRear.isBusy() || leftRear.isBusy() || opModeIsActive())&&timeofstraight.time()-starttime < timeout) {
            // nothing
            telemetry.addData("Status", "Initialized");
            telemetry.addData("leftfrontPower", leftFront.getPower());
            telemetry.addData("rightfrontPower", rightFront.getPower());
            telemetry.addData("leftrearPower", leftRear.getPower());
            telemetry.addData("rightrearPower", rightRear.getPower());
            telemetry.update();
        }
        leftRear.setPower(0);
        rightRear.setPower(0);
        leftFront.setPower(0);
        rightFront.setPower(0);

    }


    private void encoderTurn() {
        //left rear is reversed
        leftRear.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rightRear.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        rightFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        leftFront.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        leftRear.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        leftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightRear.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        leftRear.setTargetPosition(0 + Ticks);
        leftFront.setTargetPosition(0 + Ticks);
        rightRear.setTargetPosition(0 + Ticks);
        rightFront.setTargetPosition(0 + Ticks);
        leftRear.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftFront.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        rightRear.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        rightFront.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftRear.setPower(0.8);
        rightRear.setPower(0.8);
        rightFront.setPower(0.8);
        leftFront.setPower(0.8);
        while (leftFront.isBusy() && rightFront.isBusy() && rightRear.isBusy() && leftRear.isBusy() && opModeIsActive()) {
            // nothing
            telemetry.addData("leftfrontposition", leftFront.getCurrentPosition());
            telemetry.addData("leftfronttarget", leftFront.getTargetPosition());
            telemetry.addData("rightfrontposition", rightFront.getCurrentPosition());
            telemetry.addData("rightfrontarget", rightFront.getTargetPosition());
            telemetry.addData("leftrearposition", leftRear.getCurrentPosition());
            telemetry.addData("leftreartarget", leftRear.getTargetPosition());
            telemetry.addData("rightrearposition", rightRear.getCurrentPosition());
            telemetry.addData("rightreartarget", rightRear.getTargetPosition());
            telemetry.update();
        }
        leftRear.setPower(0);
        rightRear.setPower(0);
        leftFront.setPower(0);
        rightFront.setPower(0);
        leftRear.setPower(2);
        leftFront.setPower(3);
    }


}


